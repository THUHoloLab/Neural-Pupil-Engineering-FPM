classdef fused_HashEncoding2D < deep.DifferentiableFunction
    methods
        function foo = fused_HashEncoding2D()
            output_num = 1; % important!!!

            foo@deep.DifferentiableFunction(...
                            output_num,...
                            SaveInputsForBackward = true,...
                            SaveOutputsForBackward = false,...
                            NumMemoryValues = 0);

        end
        
        %% forward function
        function out_feature = forward(~,...
                                    xyz,...
                                    embedding,...
                                    bounding_box,...
                                    hash_mapsizes,...
                                    hash_offsets,...
                                    level,...
                                    log_scale,...
                                    base_res,...
                                    feature_len)
            
            % start1 = tic;
            out_feature = fullyfused_hashEncoder( ...
                'forward',...
                xyz,...
                embedding,...
                bounding_box,...
                uint32(hash_mapsizes),...
                uint32(hash_offsets),...
                level,...
                log_scale,...
                base_res,...
                feature_len ...
            );
            % wait(gpuDevice())
            % fprintf("hash forward tasks %f \n",toc(start1));
        end
        
        %% backward function
        function [dl_dxyz,...
                  dl_dembedding,...
                  dl_dbounding_box,...
                  dl_dhash_mapsizes,...
                  dl_dhash_offsets,...
                  dl_dlevel,...
                  dl_dlog_scale,...
                  dl_dbase_res,...
                  dl_dfeature_len] = backward(~,...
                                                dl_dout, ...
                                                computeGradients, ...
                                                xyz,...
                                                embedding,...
                                                bounding_box,...
                                                hash_mapsizes,...
                                                hash_offsets,...
                                                level,...
                                                log_scale,...
                                                base_res,...
                                                feature_len)
            % start1 = tic;
            dl_dxyz = [];
            dl_dbounding_box = [];
            dl_dlevel = [];
            dl_dlog_scale = [];
            dl_dbase_res = [];
            dl_dfeature_len = [];
            dl_dhash_mapsizes = [];
            dl_dhash_offsets = [];

            dl_dembedding = fullyfused_hashEncoder(...
                'backward',...
                xyz,...
                embedding,...
                real(dl_dout),...
                bounding_box,...
                uint32(hash_mapsizes),...
                uint32(hash_offsets),...
                level,...
                log_scale,...
                base_res,...
                feature_len...
            );
            % wait(gpuDevice())
            % fprintf("hash backward tasks %f \n",toc(start1));
        end
    end
end


function check_nan(x,name)
if sum(isnan(x),'all') > 0
    error(name + "has nan!");
end
end